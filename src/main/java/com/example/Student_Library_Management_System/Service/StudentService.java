package com.example.Student_Library_Management_System.Service;

import com.example.Student_Library_Management_System.DTOs.StudentUpdateMobRequestDto;
import com.example.Student_Library_Management_System.Enums.CardStatus;
import com.example.Student_Library_Management_System.Models.Card;
import com.example.Student_Library_Management_System.Models.Student;
import com.example.Student_Library_Management_System.Repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {

    public Object getNameByEmail;
    @Autowired
    StudentRepository studentRepository;

    public String createStudent(Student student){
        //Student from postman is already the basic attribute set

        //Card should be autogenerated, when the create student function gets called
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED);
        card.setStudentVariableName(student); //Using this attribute the foreign key will be set

        //Let's go to the student
        student.setCard(card);

        //if there was unidirectional mapping we have to save both of them

        // In bidirectional mapping child will be automatically saved

        studentRepository.save(student);

        //By cascading effect , child will be automatically saved.

        return "Student and Card added!";
    }


    public String findNameByEmail(String email) {
        Student student = studentRepository.findByEmail(email);
        return student.getName();
    }

   public String updateMobileNo(StudentUpdateMobRequestDto studentReq){

        //Convert the Dto to the Entity : saved better

        // First we try to fetch the originalData

       Student originalStudent = studentRepository.findById(studentReq.getId()).get();

       //We will keep the other properties as it is and only change the required parameters

       originalStudent.setMobNo(studentReq.getMobNo());

       // Always the entity object being saved

        studentRepository.save(originalStudent);
        return "Student mobile number updated";
   }



}
